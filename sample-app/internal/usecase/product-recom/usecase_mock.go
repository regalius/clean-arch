// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package productrecom

import (
	"context"
	"sync"
)

var (
	lockUsecaseMockGetRecommendationByUserID sync.RWMutex
)

// Ensure, that UsecaseMock does implement Usecase.
// If this is not the case, regenerate this file with moq.
var _ Usecase = &UsecaseMock{}

// UsecaseMock is a mock implementation of Usecase.
//
//     func TestSomethingThatUsesUsecase(t *testing.T) {
//
//         // make and configure a mocked Usecase
//         mockedUsecase := &UsecaseMock{
//             GetRecommendationByUserIDFunc: func(ctx context.Context, userID int64, options GetRecommendationByUserIDOptions) (SingleUserResult, error) {
// 	               panic("mock out the GetRecommendationByUserID method")
//             },
//         }
//
//         // use mockedUsecase in code that requires Usecase
//         // and then make assertions.
//
//     }
type UsecaseMock struct {
	// GetRecommendationByUserIDFunc mocks the GetRecommendationByUserID method.
	GetRecommendationByUserIDFunc func(ctx context.Context, userID int64, options GetRecommendationByUserIDOptions) (SingleUserResult, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetRecommendationByUserID holds details about calls to the GetRecommendationByUserID method.
		GetRecommendationByUserID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserID is the userID argument value.
			UserID int64
			// Options is the options argument value.
			Options GetRecommendationByUserIDOptions
		}
	}
}

// GetRecommendationByUserID calls GetRecommendationByUserIDFunc.
func (mock *UsecaseMock) GetRecommendationByUserID(ctx context.Context, userID int64, options GetRecommendationByUserIDOptions) (SingleUserResult, error) {
	if mock.GetRecommendationByUserIDFunc == nil {
		panic("UsecaseMock.GetRecommendationByUserIDFunc: method is nil but Usecase.GetRecommendationByUserID was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		UserID  int64
		Options GetRecommendationByUserIDOptions
	}{
		Ctx:     ctx,
		UserID:  userID,
		Options: options,
	}
	lockUsecaseMockGetRecommendationByUserID.Lock()
	mock.calls.GetRecommendationByUserID = append(mock.calls.GetRecommendationByUserID, callInfo)
	lockUsecaseMockGetRecommendationByUserID.Unlock()
	return mock.GetRecommendationByUserIDFunc(ctx, userID, options)
}

// GetRecommendationByUserIDCalls gets all the calls that were made to GetRecommendationByUserID.
// Check the length with:
//     len(mockedUsecase.GetRecommendationByUserIDCalls())
func (mock *UsecaseMock) GetRecommendationByUserIDCalls() []struct {
	Ctx     context.Context
	UserID  int64
	Options GetRecommendationByUserIDOptions
} {
	var calls []struct {
		Ctx     context.Context
		UserID  int64
		Options GetRecommendationByUserIDOptions
	}
	lockUsecaseMockGetRecommendationByUserID.RLock()
	calls = mock.calls.GetRecommendationByUserID
	lockUsecaseMockGetRecommendationByUserID.RUnlock()
	return calls
}
