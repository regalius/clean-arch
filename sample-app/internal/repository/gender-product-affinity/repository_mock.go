// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package genderproductaffinity

import (
	"context"
	"github.com/regalius/clean-arch/sample-app/internal/model/gender-product-affinity"
	"sync"
)

var (
	lockRepositoryMockGetGenderProductAffinitiesByGender sync.RWMutex
	lockRepositoryMockGetGenderProductAffinitiesByPID    sync.RWMutex
)

// Ensure, that RepositoryMock does implement Repository.
// If this is not the case, regenerate this file with moq.
var _ Repository = &RepositoryMock{}

// RepositoryMock is a mock implementation of Repository.
//
//     func TestSomethingThatUsesRepository(t *testing.T) {
//
//         // make and configure a mocked Repository
//         mockedRepository := &RepositoryMock{
//             GetGenderProductAffinitiesByGenderFunc: func(ctx context.Context, gender float32, threshold float32, options GetGenderProductAffinitiesByGenderOptions) ([]genderproductaffinity.GenderProductAffinityWithScore, error) {
// 	               panic("mock out the GetGenderProductAffinitiesByGender method")
//             },
//             GetGenderProductAffinitiesByPIDFunc: func(ctx context.Context, productID int64) (genderproductaffinity.GenderProductAffinity, error) {
// 	               panic("mock out the GetGenderProductAffinitiesByPID method")
//             },
//         }
//
//         // use mockedRepository in code that requires Repository
//         // and then make assertions.
//
//     }
type RepositoryMock struct {
	// GetGenderProductAffinitiesByGenderFunc mocks the GetGenderProductAffinitiesByGender method.
	GetGenderProductAffinitiesByGenderFunc func(ctx context.Context, gender float32, threshold float32, options GetGenderProductAffinitiesByGenderOptions) ([]genderproductaffinity.GenderProductAffinityWithScore, error)

	// GetGenderProductAffinitiesByPIDFunc mocks the GetGenderProductAffinitiesByPID method.
	GetGenderProductAffinitiesByPIDFunc func(ctx context.Context, productID int64) (genderproductaffinity.GenderProductAffinity, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetGenderProductAffinitiesByGender holds details about calls to the GetGenderProductAffinitiesByGender method.
		GetGenderProductAffinitiesByGender []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Gender is the gender argument value.
			Gender float32
			// Threshold is the threshold argument value.
			Threshold float32
			// Options is the options argument value.
			Options GetGenderProductAffinitiesByGenderOptions
		}
		// GetGenderProductAffinitiesByPID holds details about calls to the GetGenderProductAffinitiesByPID method.
		GetGenderProductAffinitiesByPID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ProductID is the productID argument value.
			ProductID int64
		}
	}
}

// GetGenderProductAffinitiesByGender calls GetGenderProductAffinitiesByGenderFunc.
func (mock *RepositoryMock) GetGenderProductAffinitiesByGender(ctx context.Context, gender float32, threshold float32, options GetGenderProductAffinitiesByGenderOptions) ([]genderproductaffinity.GenderProductAffinityWithScore, error) {
	if mock.GetGenderProductAffinitiesByGenderFunc == nil {
		panic("RepositoryMock.GetGenderProductAffinitiesByGenderFunc: method is nil but Repository.GetGenderProductAffinitiesByGender was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Gender    float32
		Threshold float32
		Options   GetGenderProductAffinitiesByGenderOptions
	}{
		Ctx:       ctx,
		Gender:    gender,
		Threshold: threshold,
		Options:   options,
	}
	lockRepositoryMockGetGenderProductAffinitiesByGender.Lock()
	mock.calls.GetGenderProductAffinitiesByGender = append(mock.calls.GetGenderProductAffinitiesByGender, callInfo)
	lockRepositoryMockGetGenderProductAffinitiesByGender.Unlock()
	return mock.GetGenderProductAffinitiesByGenderFunc(ctx, gender, threshold, options)
}

// GetGenderProductAffinitiesByGenderCalls gets all the calls that were made to GetGenderProductAffinitiesByGender.
// Check the length with:
//     len(mockedRepository.GetGenderProductAffinitiesByGenderCalls())
func (mock *RepositoryMock) GetGenderProductAffinitiesByGenderCalls() []struct {
	Ctx       context.Context
	Gender    float32
	Threshold float32
	Options   GetGenderProductAffinitiesByGenderOptions
} {
	var calls []struct {
		Ctx       context.Context
		Gender    float32
		Threshold float32
		Options   GetGenderProductAffinitiesByGenderOptions
	}
	lockRepositoryMockGetGenderProductAffinitiesByGender.RLock()
	calls = mock.calls.GetGenderProductAffinitiesByGender
	lockRepositoryMockGetGenderProductAffinitiesByGender.RUnlock()
	return calls
}

// GetGenderProductAffinitiesByPID calls GetGenderProductAffinitiesByPIDFunc.
func (mock *RepositoryMock) GetGenderProductAffinitiesByPID(ctx context.Context, productID int64) (genderproductaffinity.GenderProductAffinity, error) {
	if mock.GetGenderProductAffinitiesByPIDFunc == nil {
		panic("RepositoryMock.GetGenderProductAffinitiesByPIDFunc: method is nil but Repository.GetGenderProductAffinitiesByPID was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		ProductID int64
	}{
		Ctx:       ctx,
		ProductID: productID,
	}
	lockRepositoryMockGetGenderProductAffinitiesByPID.Lock()
	mock.calls.GetGenderProductAffinitiesByPID = append(mock.calls.GetGenderProductAffinitiesByPID, callInfo)
	lockRepositoryMockGetGenderProductAffinitiesByPID.Unlock()
	return mock.GetGenderProductAffinitiesByPIDFunc(ctx, productID)
}

// GetGenderProductAffinitiesByPIDCalls gets all the calls that were made to GetGenderProductAffinitiesByPID.
// Check the length with:
//     len(mockedRepository.GetGenderProductAffinitiesByPIDCalls())
func (mock *RepositoryMock) GetGenderProductAffinitiesByPIDCalls() []struct {
	Ctx       context.Context
	ProductID int64
} {
	var calls []struct {
		Ctx       context.Context
		ProductID int64
	}
	lockRepositoryMockGetGenderProductAffinitiesByPID.RLock()
	calls = mock.calls.GetGenderProductAffinitiesByPID
	lockRepositoryMockGetGenderProductAffinitiesByPID.RUnlock()
	return calls
}
