// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package userproductaffinity

import (
	"context"
	"github.com/regalius/clean-arch/sample-app/internal/model/user-product-affinity"
	"sync"
)

var (
	lockRepositoryMockGetUserProductAffinitiesByProductID sync.RWMutex
	lockRepositoryMockGetUserProductAffinitiesByUserID    sync.RWMutex
	lockRepositoryMockGetUserProductAffinityByID          sync.RWMutex
)

// Ensure, that RepositoryMock does implement Repository.
// If this is not the case, regenerate this file with moq.
var _ Repository = &RepositoryMock{}

// RepositoryMock is a mock implementation of Repository.
//
//     func TestSomethingThatUsesRepository(t *testing.T) {
//
//         // make and configure a mocked Repository
//         mockedRepository := &RepositoryMock{
//             GetUserProductAffinitiesByProductIDFunc: func(ctx context.Context, productID int64, options GetUserProductAffinitiesByProductIDOptions) ([]userproductaffinity.UserProductAffinity, error) {
// 	               panic("mock out the GetUserProductAffinitiesByProductID method")
//             },
//             GetUserProductAffinitiesByUserIDFunc: func(ctx context.Context, userID int64, options GetUserProductAffinitiesByUserIDOptions) ([]userproductaffinity.UserProductAffinity, error) {
// 	               panic("mock out the GetUserProductAffinitiesByUserID method")
//             },
//             GetUserProductAffinityByIDFunc: func(ctx context.Context, userID int64, productID int64) (userproductaffinity.UserProductAffinity, error) {
// 	               panic("mock out the GetUserProductAffinityByID method")
//             },
//         }
//
//         // use mockedRepository in code that requires Repository
//         // and then make assertions.
//
//     }
type RepositoryMock struct {
	// GetUserProductAffinitiesByProductIDFunc mocks the GetUserProductAffinitiesByProductID method.
	GetUserProductAffinitiesByProductIDFunc func(ctx context.Context, productID int64, options GetUserProductAffinitiesByProductIDOptions) ([]userproductaffinity.UserProductAffinity, error)

	// GetUserProductAffinitiesByUserIDFunc mocks the GetUserProductAffinitiesByUserID method.
	GetUserProductAffinitiesByUserIDFunc func(ctx context.Context, userID int64, options GetUserProductAffinitiesByUserIDOptions) ([]userproductaffinity.UserProductAffinity, error)

	// GetUserProductAffinityByIDFunc mocks the GetUserProductAffinityByID method.
	GetUserProductAffinityByIDFunc func(ctx context.Context, userID int64, productID int64) (userproductaffinity.UserProductAffinity, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetUserProductAffinitiesByProductID holds details about calls to the GetUserProductAffinitiesByProductID method.
		GetUserProductAffinitiesByProductID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ProductID is the productID argument value.
			ProductID int64
			// Options is the options argument value.
			Options GetUserProductAffinitiesByProductIDOptions
		}
		// GetUserProductAffinitiesByUserID holds details about calls to the GetUserProductAffinitiesByUserID method.
		GetUserProductAffinitiesByUserID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserID is the userID argument value.
			UserID int64
			// Options is the options argument value.
			Options GetUserProductAffinitiesByUserIDOptions
		}
		// GetUserProductAffinityByID holds details about calls to the GetUserProductAffinityByID method.
		GetUserProductAffinityByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserID is the userID argument value.
			UserID int64
			// ProductID is the productID argument value.
			ProductID int64
		}
	}
}

// GetUserProductAffinitiesByProductID calls GetUserProductAffinitiesByProductIDFunc.
func (mock *RepositoryMock) GetUserProductAffinitiesByProductID(ctx context.Context, productID int64, options GetUserProductAffinitiesByProductIDOptions) ([]userproductaffinity.UserProductAffinity, error) {
	if mock.GetUserProductAffinitiesByProductIDFunc == nil {
		panic("RepositoryMock.GetUserProductAffinitiesByProductIDFunc: method is nil but Repository.GetUserProductAffinitiesByProductID was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		ProductID int64
		Options   GetUserProductAffinitiesByProductIDOptions
	}{
		Ctx:       ctx,
		ProductID: productID,
		Options:   options,
	}
	lockRepositoryMockGetUserProductAffinitiesByProductID.Lock()
	mock.calls.GetUserProductAffinitiesByProductID = append(mock.calls.GetUserProductAffinitiesByProductID, callInfo)
	lockRepositoryMockGetUserProductAffinitiesByProductID.Unlock()
	return mock.GetUserProductAffinitiesByProductIDFunc(ctx, productID, options)
}

// GetUserProductAffinitiesByProductIDCalls gets all the calls that were made to GetUserProductAffinitiesByProductID.
// Check the length with:
//     len(mockedRepository.GetUserProductAffinitiesByProductIDCalls())
func (mock *RepositoryMock) GetUserProductAffinitiesByProductIDCalls() []struct {
	Ctx       context.Context
	ProductID int64
	Options   GetUserProductAffinitiesByProductIDOptions
} {
	var calls []struct {
		Ctx       context.Context
		ProductID int64
		Options   GetUserProductAffinitiesByProductIDOptions
	}
	lockRepositoryMockGetUserProductAffinitiesByProductID.RLock()
	calls = mock.calls.GetUserProductAffinitiesByProductID
	lockRepositoryMockGetUserProductAffinitiesByProductID.RUnlock()
	return calls
}

// GetUserProductAffinitiesByUserID calls GetUserProductAffinitiesByUserIDFunc.
func (mock *RepositoryMock) GetUserProductAffinitiesByUserID(ctx context.Context, userID int64, options GetUserProductAffinitiesByUserIDOptions) ([]userproductaffinity.UserProductAffinity, error) {
	if mock.GetUserProductAffinitiesByUserIDFunc == nil {
		panic("RepositoryMock.GetUserProductAffinitiesByUserIDFunc: method is nil but Repository.GetUserProductAffinitiesByUserID was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		UserID  int64
		Options GetUserProductAffinitiesByUserIDOptions
	}{
		Ctx:     ctx,
		UserID:  userID,
		Options: options,
	}
	lockRepositoryMockGetUserProductAffinitiesByUserID.Lock()
	mock.calls.GetUserProductAffinitiesByUserID = append(mock.calls.GetUserProductAffinitiesByUserID, callInfo)
	lockRepositoryMockGetUserProductAffinitiesByUserID.Unlock()
	return mock.GetUserProductAffinitiesByUserIDFunc(ctx, userID, options)
}

// GetUserProductAffinitiesByUserIDCalls gets all the calls that were made to GetUserProductAffinitiesByUserID.
// Check the length with:
//     len(mockedRepository.GetUserProductAffinitiesByUserIDCalls())
func (mock *RepositoryMock) GetUserProductAffinitiesByUserIDCalls() []struct {
	Ctx     context.Context
	UserID  int64
	Options GetUserProductAffinitiesByUserIDOptions
} {
	var calls []struct {
		Ctx     context.Context
		UserID  int64
		Options GetUserProductAffinitiesByUserIDOptions
	}
	lockRepositoryMockGetUserProductAffinitiesByUserID.RLock()
	calls = mock.calls.GetUserProductAffinitiesByUserID
	lockRepositoryMockGetUserProductAffinitiesByUserID.RUnlock()
	return calls
}

// GetUserProductAffinityByID calls GetUserProductAffinityByIDFunc.
func (mock *RepositoryMock) GetUserProductAffinityByID(ctx context.Context, userID int64, productID int64) (userproductaffinity.UserProductAffinity, error) {
	if mock.GetUserProductAffinityByIDFunc == nil {
		panic("RepositoryMock.GetUserProductAffinityByIDFunc: method is nil but Repository.GetUserProductAffinityByID was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		UserID    int64
		ProductID int64
	}{
		Ctx:       ctx,
		UserID:    userID,
		ProductID: productID,
	}
	lockRepositoryMockGetUserProductAffinityByID.Lock()
	mock.calls.GetUserProductAffinityByID = append(mock.calls.GetUserProductAffinityByID, callInfo)
	lockRepositoryMockGetUserProductAffinityByID.Unlock()
	return mock.GetUserProductAffinityByIDFunc(ctx, userID, productID)
}

// GetUserProductAffinityByIDCalls gets all the calls that were made to GetUserProductAffinityByID.
// Check the length with:
//     len(mockedRepository.GetUserProductAffinityByIDCalls())
func (mock *RepositoryMock) GetUserProductAffinityByIDCalls() []struct {
	Ctx       context.Context
	UserID    int64
	ProductID int64
} {
	var calls []struct {
		Ctx       context.Context
		UserID    int64
		ProductID int64
	}
	lockRepositoryMockGetUserProductAffinityByID.RLock()
	calls = mock.calls.GetUserProductAffinityByID
	lockRepositoryMockGetUserProductAffinityByID.RUnlock()
	return calls
}
