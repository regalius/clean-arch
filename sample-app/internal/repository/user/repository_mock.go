// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package user

import (
	"context"
	"github.com/regalius/clean-arch/sample-app/internal/model/user"
	"sync"
)

var (
	lockRepositoryMockGetUserByID sync.RWMutex
)

// Ensure, that RepositoryMock does implement Repository.
// If this is not the case, regenerate this file with moq.
var _ Repository = &RepositoryMock{}

// RepositoryMock is a mock implementation of Repository.
//
//     func TestSomethingThatUsesRepository(t *testing.T) {
//
//         // make and configure a mocked Repository
//         mockedRepository := &RepositoryMock{
//             GetUserByIDFunc: func(ctx context.Context, id int64) (user.User, error) {
// 	               panic("mock out the GetUserByID method")
//             },
//         }
//
//         // use mockedRepository in code that requires Repository
//         // and then make assertions.
//
//     }
type RepositoryMock struct {
	// GetUserByIDFunc mocks the GetUserByID method.
	GetUserByIDFunc func(ctx context.Context, id int64) (user.User, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetUserByID holds details about calls to the GetUserByID method.
		GetUserByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int64
		}
	}
}

// GetUserByID calls GetUserByIDFunc.
func (mock *RepositoryMock) GetUserByID(ctx context.Context, id int64) (user.User, error) {
	if mock.GetUserByIDFunc == nil {
		panic("RepositoryMock.GetUserByIDFunc: method is nil but Repository.GetUserByID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  int64
	}{
		Ctx: ctx,
		ID:  id,
	}
	lockRepositoryMockGetUserByID.Lock()
	mock.calls.GetUserByID = append(mock.calls.GetUserByID, callInfo)
	lockRepositoryMockGetUserByID.Unlock()
	return mock.GetUserByIDFunc(ctx, id)
}

// GetUserByIDCalls gets all the calls that were made to GetUserByID.
// Check the length with:
//     len(mockedRepository.GetUserByIDCalls())
func (mock *RepositoryMock) GetUserByIDCalls() []struct {
	Ctx context.Context
	ID  int64
} {
	var calls []struct {
		Ctx context.Context
		ID  int64
	}
	lockRepositoryMockGetUserByID.RLock()
	calls = mock.calls.GetUserByID
	lockRepositoryMockGetUserByID.RUnlock()
	return calls
}
